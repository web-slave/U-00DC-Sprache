import "unordered_map.u"

namespace ust
{

template</ type T />
class unordered_set
{
public:
	type key_type= T;
	type value_type= T;
	type this_type= unordered_set</ T />;
	type hasher= default_hasher;

public:
	// Default constructor.
	fn constructor()= default;

	// Copy constructor.
	fn constructor( mut this, this_type &imut other )= default;

	fn size( this ) : size_type
	{
		return impl_.size();
	}

	fn empty( this ) : bool
	{
		return impl_.empty();
	}

	fn insert( mut this, T& value ) // TODO - return reference.
	{
		impl_.insert( value, EmptyStruct() ); // TODO - move value
	}

	// TODO - add "erase"

	fn drop( mut this, T& value )
	{
		impl_.drop( value );
	}

	fn count( this, T& value ) : size_type
	{
		return select( impl_.find( value ).empty() ? size_type(0) : size_type(1) );
	}

	fn clear( mut this )
	{
		impl_.clear();
	}

private:
	struct EmptyStruct{}
	type Impl= unordered_map</ T, EmptyStruct />;

private:
	Impl impl_;
}

} // namespace ust
